/**********************************************************/
/*                                                        */
/*                  Класс QChartSynZoom                   */
/*                      Версия 1.6.3                      */
/*                                                        */
/* Обеспечивает интерфейс синхронного масштабирования     */
/* нескольких графиков QwtPlot в стиле компонента TChart  */
/* (Delphi, C++Builder).                                  */
/*                                                        */
/* Разработал Мельников Сергей Андреевич,                 */
/* г. Каменск-Уральский Свердловской обл., 2012 г.,       */
/* при поддержке Ю. А. Роговского, г. Новосибирск.        */
/*                                                        */
/* Разрешается свободное использование и распространение. */
/* Упоминание автора обязательно.                         */
/*                                                        */
/**********************************************************/

#ifndef QCHARTSYNZOOM_H
#define QCHARTSYNZOOM_H

#include <QSplitter>
#include <QMouseEvent>
#include <QTimer>
#include <qwt_plot.h>
#include <qwt_plot_grid.h>
#include <qwt_plot_canvas.h>

class QChartZoomItem;   // элемент, отвечающий за один график
class QScaleBounds;     // контейнер границ шкалы
class QMainSynZoomSvc;  // интерфейс масштабирования графика
class QDragSynZoomSvc;  // интерфейс перемещения графика

class QChartSynZoom : public QObject
{
    Q_OBJECT

public:
    // конструктор для графиков в сплиттере
    explicit QChartSynZoom(QSplitter *);
    // конструктор для отдельного графика
    explicit QChartSynZoom(QwtPlot *);
    // конструктор для отдельного графика,
    // который будет добавлен позже
    explicit QChartSynZoom();
    // деструктор
    ~QChartSynZoom();

    // Значения типа текущего преобразования графика
    // ctNone - нет преобразования
    // ctZoom - изменение масштаба
    // ctDrag - перемещение графика
    // ctWheel - режим Wheel (изменение масштаба по обеим осям
        // вращением колеса мыши при нажатой клавише Ctrl)
    // ctVerWheel - режим VerWheel (изменение масштаба по вертикальной оси
        // вращением колеса мыши при нажатой левой клавише Shift)
    // ctHorWheel - режим HorWheel (изменение масштаба по горизонтальной оси
        // вращением колеса мыши при нажатой правой клавише Shift)
    // ctAxisHL - режим изменения левой границы
    // ctAxisHR - режим изменения правой границы
    // ctAxisVB - режим изменения нижней границы
    // ctAxisVT - режим изменения верхней границы
    // (значение, отличающееся от ctNone действует только пока
    // нажата левая или правая кнопка мыши, клавиша Ctrl или Shift)
    enum QConvType {ctNone,ctZoom,ctDrag,ctWheel,ctVerWheel,ctHorWheel,
                    ctAxisHL,ctAxisHR,ctAxisVB,ctAxisVT};

    // текущий режим масштабирования
    QConvType regim();
    // переключение режима масштабирования
    void setRegim(QConvType);

    // количество масштабирующих элементов в списке
    int count();
    // указатель на масштабирующий элемент
    QChartZoomItem *at(int);

    // добавление графика под опеку менеджера
    void appendPlot(QwtPlot *);
    // установка цвета рамки, задающей новый размер графика
    void setRubberBandColor(QColor);
    // включение/выключение индикации выделяемой области
    void indicateZoom(bool);
    // включение/выключение легкого режима
    void setLightMode(bool);

    // Значения режима индикации перемещения графика
    // imNone - нет индикации
    // imSimple - простая индикация (только рамка канвы графика)
    // imDetailed - подробная индикация (рамка канвы и координатная сетка)
    enum QDragIndiStyle {disNone,disSimple,disDetailed};

    // включение/выключение индикации перемещаемой области графика
    // (имеет эффект, если включен легкий режим)
    void indicateDragBand(QDragIndiStyle);

    // установка цвета виджета индикатора перемещения
    void setDragBandColor(QColor);
    // фиксация текущих границ графика в качестве исходных
    void fixBoundaries();

    // включение/выключение синхронизации дополнительной
    // горизонтальной шкалы для графика с индексом ind
    void setHorSync(bool,int);
    // включение/выключение синхронизации дополнительной
    // горизонтальной шкалы для всех графиков
    void setHorSync(bool);
    // включение/выключение синхронизации дополнительной
    // вертикальной шкалы для графика с индексом ind
    void setVerSync(bool,int);
    // включение/выключение синхронизации дополнительной
    // вертикальной шкалы для всех графиков
    void setVerSync(bool);
    // включение/выключение синхронизации дополнительной горизонтальной
    // и вертикальной шкалы для графика с индексом ind
    void setSync(bool,int);
    // включение/выключение синхронизации дополнительной горизонтальной
    // и вертикальной шкалы для всех графиков
    void setSync(bool);

    void updateAllPlots();  // обновление всех графиков
    // фактическая фиксация текущих границ графика
    // в качестве исходных (если флаг isbF сброшен)
    void fixBounds();
    // восстановление исходных границ графика
    void restBounds(int);
    // синхронная установка границ горизонтальной шкалы графиков
    void setHorizontScale(double,double);
    // перестроение графиков синхронно с указанным
    void synReplot(int);
    // перерисовка указанного графика с выравниванием
    void alignRepaint(int);

signals:
    // сигнал - добавлен график
    void plotAppended(int);

protected:
    // обработчик всех событий
    bool eventFilter(QObject *,QEvent *);

private Q_SLOTS:
    // слот сигнала - Изменение шкалы графика
    void scaleDivChanged();

private slots:
    // слот сигнала - Изменение сплиттера
    void splitterMoved();
    // слот сигнала - Отложенное обновление графиков
    void delayedUpdate();

private:
    QObject *mwin;          // Главное окно приложения
    QObject *splt;          // Сплиттер - контейнер графиков
    QList<QChartZoomItem *> *items; // Список элементов, отвечающих за графики
    bool light;             // Легкий режим (с индикацией перемещения графика)

    // Текущее значение максимального количества
    // основных делений на горизонтальной шкале графиков
    int mstHorDiv;  // основной
    int slvHorDiv;  // дополнительной

    bool inSync;    // Флаг обновления шкалы
    QTimer *tick;   // Таймер паузы перед отложенным обновлением графиков

    // Интерфейс масштабирования графика
    QMainSynZoomSvc *mnzmsvc;
    // Интерфейс перемещения графика
    QDragSynZoomSvc *drzmsvc;

    QConvType convType;     // Тип текущего преобразования графика
    bool isbF;              // Флаг, задающий необходимость запомнить исходные границы графика
                            // Если isbF сброшен, то при первом нажатии на кнопку текущие границы
                            // графика будут сохранены в переменных isb_xl,isb_xr,isb_yb,isb_yt,
                            // и при отмене масштабирования и перемещения график будет возвращаться
                            // именно к этим границам

    // общая часть конструктора
    void common();
    // определение главного родителя
    QObject *generalParent(QObject *);
    // назначение отложенного обновления
    void initDelayedUpdate();

    // создание списка ширины меток горизонтальной шкалы
    QList<int> *getLabelWidths(QwtPlot *,int);
    // определение средней ширины меток горизонтальной шкалы
    int meanLabelWidth(int);
    // определение минимальной ширины графика
    int minimumPlotWidth();
    // обновление одной из пары горизонтальных шкал графиков
    bool updateOneHorAxis(int,int *);
    // обновление горизонтальной шкалы графиков
    bool updateHorAxis();
    // обновление вертикальной шкалы графика
    bool updateVerAxis(QwtPlot *,int,int *);

    // выравнивание графиков по вертикали
    void alignVAxes(int);
};

/**********************************************************/
/*                                                        */
/*                  Класс QChartZoomItem                  */
/*                      Версия 1.2.2                      */
/*                                                        */
/* Обеспечивает взаимодействие менеджера масштабирования  */
/* с отдельным графиком.                                  */
/*                                                        */
/* Разработал Мельников Сергей Андреевич,                 */
/* г. Каменск-Уральский Свердловской обл., 2012 г.,       */
/* при поддержке Ю. А. Роговского, г. Новосибирск.        */
/*                                                        */
/* Разрешается свободное использование и распространение. */
/* Упоминание автора обязательно.                         */
/*                                                        */
/**********************************************************/

// Контейнер элемента, отвечающего за один график
class QChartZoomItem
{
public:
    // конструктор
    explicit QChartZoomItem(QwtPlot *);
    // деструктор
    ~QChartZoomItem();

    QwtPlot *plot;          // опекаемый график

    // Текущее значение максимального количества
    // основных делений на вертикальной шкале графиков
    int mstVerDiv;  // основной
    int slvVerDiv;  // дополнительной

    // Горизонтальная шкала
    QwtPlot::Axis masterX;  // основная
    QwtPlot::Axis slaveX;   // дополнительная
    // Вертикальная шкала
    QwtPlot::Axis masterY;  // основная
    QwtPlot::Axis slaveY;   // дополнительная

    // Контейнеры границ шкалы
    // (вертикальной и горизонтальной)
    QScaleBounds *isb_x,*isb_y;

    // включение/выключение синхронизации дополнительной
    // горизонтальной шкалы для опекаемого графика
    bool setHSync(bool);
    // включение/выключение синхронизации дополнительной
    // вертикальной шкалы для опекаемого графика
    bool setVSync(bool);

private:
    // назначение основной и дополнительной шкалы
    void allocAxis(int,int,QwtPlot::Axis *,QwtPlot::Axis *);
};

/**********************************************************/
/*                                                        */
/*                   Класс QScaleBounds                   */
/*                      Версия 1.0.1                      */
/*                                                        */
/* Содержит исходные границы основной шкалы и соотношение */
/* между основной и дополнительной шкалой.                */
/*                                                        */
/* Разработал Мельников Сергей Андреевич,                 */
/* г. Каменск-Уральский Свердловской обл., 2012 г.,       */
/* при поддержке Ю. А. Роговского, г. Новосибирск.        */
/*                                                        */
/* Разрешается свободное использование и распространение. */
/* Упоминание автора обязательно.                         */
/*                                                        */
/**********************************************************/

class QScaleBounds
{
public:
    // конструктор
    explicit QScaleBounds(QwtPlot *,QwtPlot::Axis,QwtPlot::Axis);

    double min,max;     // исходные границы основной шкалы
    double ak,bk;       // коэффициенты, задающие линейное соотношение
                        // между основной шкалой и дополнительной

    bool sync;  // признак синхронизации дополнительной шкалы с основной

    // фиксация исходных границ шкалы
    void fix();
    // установка заданных границ шкалы
    void set(double,double);
    // восстановление исходных границ шкалы
    void rest();
    // переустановка границ дополнительной шкалы
    void dup();
    // определение влияет ли указанная шкала на другие
    bool affected(QwtPlot::Axis);
    // установка количества делений на основной шкале с образца
    void setDiv(QwtScaleDiv *);

private:
    QwtPlot *plot;          // опекаемый график
    QwtPlot::Axis master;   // основная шкала
    QwtPlot::Axis slave;    // дополнительная
    bool fixed;             // признак фиксации границ
};

/**********************************************************/
/*                                                        */
/*                 Класс QMainSynZoomSvc                  */
/*                      Версия 1.0.2                      */
/*                                                        */
/* Поддерживает интерфейс синхронного масштабирования     */
/* графика как одну из основных функций класса            */
/* QChartSynZoom.                                         */
/* Выделен в отдельный класс, начиная с версии 1.5.0.     */
/*                                                        */
/* Разработал Мельников Сергей Андреевич,                 */
/* г. Каменск-Уральский Свердловской обл., 2012 г.,       */
/* при поддержке Ю. А. Роговского, г. Новосибирск.        */
/*                                                        */
/* Разрешается свободное использование и распространение. */
/* Упоминание автора обязательно.                         */
/*                                                        */
/**********************************************************/

class QMainSynZoomSvc : public QObject
{
    Q_OBJECT

public:
    // конструктор
    explicit QMainSynZoomSvc();

    // прикрепление интерфейса к менеджеру масштабирования
    void attach(QChartSynZoom *);

    // установка цвета рамки, задающей новый размер графика
    void setRubberBandColor(QColor);
    // включение/выключение индикации выделяемой области
    void indicateZoom(bool);

protected:
    // обработчик всех событий
    bool eventFilter(QObject *,QEvent *);

private slots:
    // слот сигнала - Добавление нового графика
    void connectPlot(int);

private:
    QChartSynZoom *zoom;    // Опекаемый менеджер масштабирования
    QWidget *zwid;          // Виджет для отображения индикатора перемещения графика
    QColor zwClr;           // Цвет рамки, задающей новый размер графика
    bool indiZ;             // Флаг индикации выделяемой области
    QCursor tCursor;        // Буфер для временного хранения курсора

    int scp_x,scp_y;        // Положение курсора в момент начала преобразования
                            // (в пикселах относительно канвы графика)

    // прорисовка виджета выделенной области
    void showZoomWidget(QRect);

    // обработчик обычных событий от мыши
    void procMouseEvent(QEvent *,int);

    // обработчик нажатия на кнопку мыши
    // (включение изменения масштаба)
    void startZoom(QMouseEvent *,int);
    // обработчик перемещения мыши
    // (выделение новых границ графика)
    void selectZoomRect(QMouseEvent *,int);
    // обработчик отпускания кнопки мыши
    // (выполнение изменения масштаба)
    void procZoom(QMouseEvent *,int);
};

/**********************************************************/
/*                                                        */
/*                 Класс QDragSynZoomSvc                  */
/*                      Версия 1.0.1                      */
/*                                                        */
/* Поддерживает интерфейс синхронного перемещения графика */
/* как одну из основных функций класса QChartSynZoom.     */
/* Выделен в отдельный класс, начиная с версии 1.5.0.     */
/*                                                        */
/* Разработал Мельников Сергей Андреевич,                 */
/* г. Каменск-Уральский Свердловской обл., 2012 г.,       */
/* при поддержке Ю. А. Роговского, г. Новосибирск.        */
/*                                                        */
/* Разрешается свободное использование и распространение. */
/* Упоминание автора обязательно.                         */
/*                                                        */
/**********************************************************/

class QDragSynZoomSvc : public QObject
{
    Q_OBJECT

public:
    // конструктор
    explicit QDragSynZoomSvc();

    // прикрепление интерфейса к менеджеру масштабирования
    void attach(QChartSynZoom *);

    // включение/выключение легкого режима
    void setLightMode(bool);
    // включение/выключение индикации перемещаемой области
    // (имеет эффект, если включен легкий режим)
    void setIndicatorStyle(QChartSynZoom::QDragIndiStyle);
    // установка цвета виджета индикатора перемещения
    void setDragBandColor(QColor);

protected:
    // обработчик всех событий
    bool eventFilter(QObject *,QEvent *);

private slots:
    // слот сигнала - Добавление нового графика
    void connectPlot(int);

private:
    QChartSynZoom *zoom;    // Опекаемый менеджер масштабирования
    bool light;             // Легкий режим (с индикацией перемещения)
    QChartSynZoom::QDragIndiStyle indiDrB;  // Режим индикации перемещения графика
    QWidget *zwid;          // Виджет для отображения индикатора перемещения графика
    QColor dwClr;           // Цвет виджета, индицирующего перемещения графика
    QCursor tCursor;        // Буфер для временного хранения курсора

    double scb_xl,scb_xr;   // Текущие границы графика по горизонтальной оси
                            // в момент начала преобразования
    double scb_yb,scb_yt;   // Текущие границы графика по вертикальной оси
                            // в момент начала преобразования
    double cs_kx,cs_ky;     // Текущие масштабирующие множители по обеим осям
                            // (изменение координаты при перемещении на один пиксел)
    int scp_x,scp_y;        // Положение курсора в момент начала преобразования
                            // (в пикселах относительно канвы графика)

    // добавление в маску индикатора вертикальных линий сетки
    // для меток горизонтальной шкалы
    QRegion addHorTicks(QRegion,QwtScaleDiv::TickType,QChartZoomItem *);
    // добавление в маску индикатора горизонтальных линий сетки
    // для меток вертикальной шкалы
    QRegion addVerTicks(QRegion,QwtScaleDiv::TickType,QChartZoomItem *);
    // прорисовка изображения индикатора перемещения
    void showDragWidget(QPoint,int);
    // применение результатов перемещения графика
    void applyDrag(QPoint,int);

    // обработчик событий от мыши
    void dragMouseEvent(QEvent *,int);

    // обработчик нажатия на кнопку мыши
    // (включение перемещения графика)
    void startDrag(QMouseEvent *,int);
    // обработчик перемещения мыши
    // (выполнение перемещения или выбор нового положения графика)
    void procDrag(QMouseEvent *,int);
    // обработчик отпускания кнопки мыши
    // (выключение перемещения графика)
    void endDrag(QMouseEvent *,int);
};

#endif // QCHARTSYNZOOM_H
